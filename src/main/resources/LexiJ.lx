// Implicit declarations
ALPHA_LOWER = [a-z]
ALPHA_UPPER = [A-Z]
ALPHA = [{ALPHA_LOWER}|{ALPHA_UPPER}]

NUM = [0-9]

HEX = [{NUM}|abcdefABCDEF]

ALPHA_NUM = [{ALPHA}|{NUM}]

// JAVA_IDENT = custom method
// JAVA_IDENT_PART = custom method

// Start of file
name("LexiJ") // Generates file name: "LexiJ.java"
buffers(1) // Creates 1 buffer that can be used throughout the lexer.

LINE_END = [\r|\n|\r\n]
WHITESPACE = [ \t]

ANY_CHARACTER = ^(\r\n);
ANY_SPACE = [{LINE_END}|{WHITESPACE}]

// ESCAPED_CHARACTER = \\{}

LINE_COMMENT = {WHITESPACE}* "//" (^{LINE_END})*

// NAMESPACE -> {ALPHA}
// NUMBER -> {NUM}

IDENTIFIER = {JIDENT} {JIDENT_PART}*
// IDENTIFIER_REFERENCE = \{ {IDENTIFIER} \}
IDENTIFIER_REFERENCE = "{" {IDENTIFIER} "}"

$SOF {
	package me.jezza;
}

$EOF {
	System.out.println("");
}

#PIPE = "|"
#COLON_EQUAL = ":="
#LEFT_BRACE = "{"
#RIGHT_BRACE = "}"
#LEFT_BRACKET = "["
#RIGHT_BRACKET = "]"
#LEFT_PARENTHESES = "("
#RIGHT_PARENTHESES = ")"

initial {
	"//" := -> comment
//	"//" -> comment

	({ALPHA}|_)+({ALPHA_NUM}|_)* := #NAMESPACE
//	([{ALPHA}|_])+([{ALPHA_NUM}|_])* := #NAMESPACE

	{NUM} := #NUMBER;

 	"\"" := {
 		buffer[0].clear()
	 	-> string
 	}
	EOL | EOF {
	}
	default := {
		print("Fallthrough")
	}
}

string {
	"\"" := {
		symbol(STRING, buffer[0])
	}
	default := {
		buffer[0].append(current())
	}
}

comment {
}
